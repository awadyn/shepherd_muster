syntax = "proto3";

option go_package = "github.com/awadyn/shep_remote_muster";

package muster;


service Pulse {
	rpc HeartBeat (HeartbeatRequest) returns (HeartbeatReply) {}
}

message HeartbeatRequest {
	uint32 shep_request = 1;
}

message HeartbeatReply {
	uint32 shep_request = 1;
	string muster_reply = 2;
}


service Log {
	rpc SyncLogBuffers (stream SyncLogRequest) returns (SyncLogReply) {}
}

message LogEntry {
	repeated uint64 vals = 1;
}

message SyncLogRequest {
	string sheep_id = 1;
	string log_id = 2;
	LogEntry log_entry = 3;
}

message SyncLogReply {
	bool sync_complete = 1;
}


service Control {
	rpc ApplyControl (stream ControlRequest) returns (ControlReply) {}
}

message ControlEntry {
	string ctrl_id = 1;
	uint64 val = 2;
}

message ControlRequest {
	string sheep_id = 1;
	ControlEntry ctrl_entry = 2;
}

message ControlReply {
	bool ctrl_complete = 1;
}


service Coordinate {
        rpc CoordinateLog (CoordinateLogRequest) returns (CoordinateLogReply) {}
        rpc CoordinateCtrl (CoordinateCtrlRequest) returns (CoordinateCtrlReply) {}
	rpc CompleteRun(CompleteRunRequest) returns (CompleteRunReply) {}
}

message CoordinateLogRequest {
        string sheep_id = 1;
        string log_id = 2;
	string coordinate_cmd = 3;
}

message CoordinateLogReply {
        string sheep_id = 1;
        string log_id = 2;
	string coordinate_cmd = 3;
	bool status = 4;
}

message CoordinateCtrlRequest {
        string sheep_id = 1;
        string ctrl_id = 2;
}

message CoordinateCtrlReply {
        string sheep_id = 1;
        string ctrl_id = 2;
	uint64 ctrl_val = 3;
}

message CompleteRunRequest {
	string sheep_id = 1;
	string muster_id = 2;
}

message CompleteRunReply {
	bool run_complete = 1;
}
