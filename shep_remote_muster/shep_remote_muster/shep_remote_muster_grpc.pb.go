// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: shep_remote_muster/shep_remote_muster.proto

package shep_remote_muster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Pulse_HeartBeat_FullMethodName = "/muster.Pulse/HeartBeat"
)

// PulseClient is the client API for Pulse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PulseClient interface {
	HeartBeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error)
}

type pulseClient struct {
	cc grpc.ClientConnInterface
}

func NewPulseClient(cc grpc.ClientConnInterface) PulseClient {
	return &pulseClient{cc}
}

func (c *pulseClient) HeartBeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, Pulse_HeartBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PulseServer is the server API for Pulse service.
// All implementations must embed UnimplementedPulseServer
// for forward compatibility.
type PulseServer interface {
	HeartBeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error)
	mustEmbedUnimplementedPulseServer()
}

// UnimplementedPulseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPulseServer struct{}

func (UnimplementedPulseServer) HeartBeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedPulseServer) mustEmbedUnimplementedPulseServer() {}
func (UnimplementedPulseServer) testEmbeddedByValue()               {}

// UnsafePulseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PulseServer will
// result in compilation errors.
type UnsafePulseServer interface {
	mustEmbedUnimplementedPulseServer()
}

func RegisterPulseServer(s grpc.ServiceRegistrar, srv PulseServer) {
	// If the following call pancis, it indicates UnimplementedPulseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Pulse_ServiceDesc, srv)
}

func _Pulse_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PulseServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pulse_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PulseServer).HeartBeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pulse_ServiceDesc is the grpc.ServiceDesc for Pulse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pulse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "muster.Pulse",
	HandlerType: (*PulseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _Pulse_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shep_remote_muster/shep_remote_muster.proto",
}

const (
	Log_SyncLogBuffers_FullMethodName = "/muster.Log/SyncLogBuffers"
)

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	SyncLogBuffers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncLogRequest, SyncLogReply], error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) SyncLogBuffers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncLogRequest, SyncLogReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[0], Log_SyncLogBuffers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncLogRequest, SyncLogReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_SyncLogBuffersClient = grpc.ClientStreamingClient[SyncLogRequest, SyncLogReply]

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility.
type LogServer interface {
	SyncLogBuffers(grpc.ClientStreamingServer[SyncLogRequest, SyncLogReply]) error
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogServer struct{}

func (UnimplementedLogServer) SyncLogBuffers(grpc.ClientStreamingServer[SyncLogRequest, SyncLogReply]) error {
	return status.Errorf(codes.Unimplemented, "method SyncLogBuffers not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}
func (UnimplementedLogServer) testEmbeddedByValue()             {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	// If the following call pancis, it indicates UnimplementedLogServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_SyncLogBuffers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).SyncLogBuffers(&grpc.GenericServerStream[SyncLogRequest, SyncLogReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_SyncLogBuffersServer = grpc.ClientStreamingServer[SyncLogRequest, SyncLogReply]

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "muster.Log",
	HandlerType: (*LogServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncLogBuffers",
			Handler:       _Log_SyncLogBuffers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "shep_remote_muster/shep_remote_muster.proto",
}

const (
	Control_ApplyControl_FullMethodName = "/muster.Control/ApplyControl"
)

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	ApplyControl(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ControlRequest, ControlReply], error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) ApplyControl(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ControlRequest, ControlReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Control_ServiceDesc.Streams[0], Control_ApplyControl_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ControlRequest, ControlReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Control_ApplyControlClient = grpc.ClientStreamingClient[ControlRequest, ControlReply]

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility.
type ControlServer interface {
	ApplyControl(grpc.ClientStreamingServer[ControlRequest, ControlReply]) error
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlServer struct{}

func (UnimplementedControlServer) ApplyControl(grpc.ClientStreamingServer[ControlRequest, ControlReply]) error {
	return status.Errorf(codes.Unimplemented, "method ApplyControl not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}
func (UnimplementedControlServer) testEmbeddedByValue()                 {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	// If the following call pancis, it indicates UnimplementedControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_ApplyControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServer).ApplyControl(&grpc.GenericServerStream[ControlRequest, ControlReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Control_ApplyControlServer = grpc.ClientStreamingServer[ControlRequest, ControlReply]

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "muster.Control",
	HandlerType: (*ControlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ApplyControl",
			Handler:       _Control_ApplyControl_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "shep_remote_muster/shep_remote_muster.proto",
}

const (
	Coordinate_CoordinateLog_FullMethodName  = "/muster.Coordinate/CoordinateLog"
	Coordinate_CoordinateCtrl_FullMethodName = "/muster.Coordinate/CoordinateCtrl"
	Coordinate_CompleteRun_FullMethodName    = "/muster.Coordinate/CompleteRun"
)

// CoordinateClient is the client API for Coordinate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinateClient interface {
	CoordinateLog(ctx context.Context, in *CoordinateLogRequest, opts ...grpc.CallOption) (*CoordinateLogReply, error)
	CoordinateCtrl(ctx context.Context, in *CoordinateCtrlRequest, opts ...grpc.CallOption) (*CoordinateCtrlReply, error)
	CompleteRun(ctx context.Context, in *CompleteRunRequest, opts ...grpc.CallOption) (*CompleteRunReply, error)
}

type coordinateClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinateClient(cc grpc.ClientConnInterface) CoordinateClient {
	return &coordinateClient{cc}
}

func (c *coordinateClient) CoordinateLog(ctx context.Context, in *CoordinateLogRequest, opts ...grpc.CallOption) (*CoordinateLogReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoordinateLogReply)
	err := c.cc.Invoke(ctx, Coordinate_CoordinateLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinateClient) CoordinateCtrl(ctx context.Context, in *CoordinateCtrlRequest, opts ...grpc.CallOption) (*CoordinateCtrlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoordinateCtrlReply)
	err := c.cc.Invoke(ctx, Coordinate_CoordinateCtrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinateClient) CompleteRun(ctx context.Context, in *CompleteRunRequest, opts ...grpc.CallOption) (*CompleteRunReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteRunReply)
	err := c.cc.Invoke(ctx, Coordinate_CompleteRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinateServer is the server API for Coordinate service.
// All implementations must embed UnimplementedCoordinateServer
// for forward compatibility.
type CoordinateServer interface {
	CoordinateLog(context.Context, *CoordinateLogRequest) (*CoordinateLogReply, error)
	CoordinateCtrl(context.Context, *CoordinateCtrlRequest) (*CoordinateCtrlReply, error)
	CompleteRun(context.Context, *CompleteRunRequest) (*CompleteRunReply, error)
	mustEmbedUnimplementedCoordinateServer()
}

// UnimplementedCoordinateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinateServer struct{}

func (UnimplementedCoordinateServer) CoordinateLog(context.Context, *CoordinateLogRequest) (*CoordinateLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinateLog not implemented")
}
func (UnimplementedCoordinateServer) CoordinateCtrl(context.Context, *CoordinateCtrlRequest) (*CoordinateCtrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinateCtrl not implemented")
}
func (UnimplementedCoordinateServer) CompleteRun(context.Context, *CompleteRunRequest) (*CompleteRunReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRun not implemented")
}
func (UnimplementedCoordinateServer) mustEmbedUnimplementedCoordinateServer() {}
func (UnimplementedCoordinateServer) testEmbeddedByValue()                    {}

// UnsafeCoordinateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinateServer will
// result in compilation errors.
type UnsafeCoordinateServer interface {
	mustEmbedUnimplementedCoordinateServer()
}

func RegisterCoordinateServer(s grpc.ServiceRegistrar, srv CoordinateServer) {
	// If the following call pancis, it indicates UnimplementedCoordinateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coordinate_ServiceDesc, srv)
}

func _Coordinate_CoordinateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinateServer).CoordinateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinate_CoordinateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinateServer).CoordinateLog(ctx, req.(*CoordinateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinate_CoordinateCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinateCtrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinateServer).CoordinateCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinate_CoordinateCtrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinateServer).CoordinateCtrl(ctx, req.(*CoordinateCtrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinate_CompleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinateServer).CompleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinate_CompleteRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinateServer).CompleteRun(ctx, req.(*CompleteRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinate_ServiceDesc is the grpc.ServiceDesc for Coordinate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "muster.Coordinate",
	HandlerType: (*CoordinateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CoordinateLog",
			Handler:    _Coordinate_CoordinateLog_Handler,
		},
		{
			MethodName: "CoordinateCtrl",
			Handler:    _Coordinate_CoordinateCtrl_Handler,
		},
		{
			MethodName: "CompleteRun",
			Handler:    _Coordinate_CompleteRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shep_remote_muster/shep_remote_muster.proto",
}
